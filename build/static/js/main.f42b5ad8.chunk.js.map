{"version":3,"sources":["components/Navbar.js","components/Nav.js","components/UserCards.js","components/Follower.js","components/Followers.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","Nav","UserCards","user","name","login","location","lassName","src","avatar_url","alt","Follower","follower","style","color","fontSize","Followers","useState","followers","setFollowers","useEffect","axios","get","then","res","console","log","data","map","key","id","Home","margin","width","marginTop","App","state","setState","exact","path","component","render","props","React","Component","Boolean","window","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2SAaeA,MAVf,WACI,OACI,yBAAKC,UAAW,OACZ,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,QAAvB,QACA,kBAAC,IAAD,CAAMC,GAAG,aAAaD,UAAU,QAAhC,aACA,kBAAC,IAAD,CAAMC,GAAG,aAAaD,UAAU,QAAhC,eCOGE,MAZf,WACE,OACE,yBAAKF,UAAU,YACb,4BACG,IACD,uBAAGA,UAAU,kBAFf,6BAIA,kBAAC,EAAD,QCSSG,MAjBf,YAA4B,IAARC,EAAO,EAAPA,KAChB,OACI,yBAAKJ,UAAU,cACZ,yBAAKA,UAAU,oBACV,qCAAWI,EAAKC,MAChB,0CAAgBD,EAAKE,OACrB,wCAAcF,EAAKG,WAEvB,yBAAKC,SAAS,qBACT,yBAAKC,IAAKL,EAAKM,WAAYC,IAAI,oB,yBCUjCC,MAnBf,YAA+B,IAAZC,EAAW,EAAXA,SACf,OACI,yBAAKb,UAAY,QACb,yBAAKA,UAAU,mCAEX,uBAAGc,MAAO,CAAEC,MAAO,QAASC,SAAU,WAAtC,eAA8DH,EAASP,QAG3E,yBAAKN,UAAU,oCACT,yBAAKS,IAAKI,EAASH,WAAYC,IAAI,eCiBtCM,MAxBf,WAAsB,IAAD,EAEgBC,mBAAS,IAFzB,mBAEXC,EAFW,KAEAC,EAFA,KAajB,OATAC,qBAAW,WACPC,IAAMC,IAAI,2DAA2DC,MAAM,SAAAC,GACvEC,QAAQC,IAAI,WAAYF,GACxBL,EAAaK,EAAIG,WAItB,IAGC,yBAAK5B,UAAU,kBAEPmB,EAAUU,KAAK,SAAAhB,GAAQ,OACnB,kBAAC,EAAD,CAAUiB,IAAOjB,EAASkB,GAAIlB,SAAYA,SCP/CmB,MAZf,WACE,OACE,yBAAKlB,MAAO,CAAEmB,OAAQ,SAAUC,MAAO,OAASC,UAAW,SACzD,yBACE1B,IAAI,qIAEJE,IAAI,gBC0CGyB,E,2MA7BbC,MAAQ,CACNjC,KAAM,I,mFAGa,IAAD,OACjBkB,IAAMC,IAAI,0CAA0CC,MAAK,SAAAC,GACvDC,QAAQC,IAAI,MAAOF,GACnB,EAAKa,SAAS,CAAClC,KAAMqB,EAAIG,Y,+BAIpB,IAAD,OACP,OACA,kBAAC,IAAD,KACG,yBAAK5B,UAAU,OAChB,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOuC,OAAK,EAACC,KAAK,IAAIC,UAAWT,IACjC,kBAAC,IAAD,CAAOQ,KAAK,aAAaE,OAAS,SAACC,GAAD,OAAU,kBAAC,EAAD,iBAAeA,EAAf,CAAsBvC,KAAM,EAAKiC,MAAMjC,WACnF,kBAAC,IAAD,CAAOoC,KAAK,aAAaC,UAAWxB,U,GApBxB2B,IAAMC,WCPJC,QACW,cAA7BC,OAAOxC,SAASyC,UAEe,UAA7BD,OAAOxC,SAASyC,UAEhBD,OAAOxC,SAASyC,SAASC,MACvB,2DCZNC,IAASR,OAAO,kBAAC,EAAD,MAASS,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,MAAK,SAAAgC,GACjCA,EAAaC,kB","file":"static/js/main.f42b5ad8.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Navbar() {\n    return (\n        <div className ='nav'>\n            <Link to=\"/\" className='link'>Home</Link>\n            <Link to=\"/usercards\" className='link'>User Card</Link>\n            <Link to=\"/followers\" className='link'>Followers</Link>\n        </div>\n    )\n}\n\nexport default Navbar\n","import React from \"react\";\nimport Navbar from \"./Navbar\";\n\nfunction Nav() {\n  return (\n    <div className=\"main-nav\">\n      <h1>\n        {\" \"}\n        <i className=\"fab fa-github\"></i> Young's Github User Card\n      </h1>\n      <Navbar />\n    </div>\n  );\n}\n\nexport default Nav;\n","import React from 'react'\n\nfunction UserCards({user}) {\n    return (\n        <div className=\"user-cards\">\n           <div className=\"user-detail left\">\n                <h2>Name: {user.name}</h2>\n                <p>Login Name: {user.login}</p>\n                <o>location: {user.location}</o>\n           </div>\n            <div lassName=\"user-detail right\">\n                 <img src={user.avatar_url} alt='users avatar'/>\n            </div>\n          \n\n        </div>\n    )\n}\n\nexport default UserCards\n","import React from 'react'\n\nfunction Follower({follower}) {\n    return (\n        <div className = \"card\">\n            <div className=\"card-element card-element--left\">\n                \n                <p style={{ color: 'white', fontSize: '1.4rem'}}>Login name: {follower.login}</p>\n                \n            </div>\n            <div className=\"card-element card-element--right\">\n                  <img src={follower.avatar_url} alt=\"avartar\" />\n            </div>\n          \n\n\n\n        </div>\n    )\n}\n\nexport default Follower\n","import React, {useState, useEffect} from 'react';\nimport axios from 'axios';\nimport Follower from './Follower';\n\nfunction Followers() {\n\n    const[followers, setFollowers] = useState([]);\n\n    useEffect( ()=> {\n        axios.get('https://api.github.com/users/jonasschmedtmann/followers').then( res => {\n            console.log('follower', res);\n            setFollowers(res.data);\n        })\n        \n\n    }, [])\n\n    return (\n        <div className=\"follower-lists\">\n            {\n                followers.map( follower => \n                    <Follower key = {follower.id} follower = {follower} />\n                )\n            }\n        </div>\n    )\n}\n\nexport default Followers\n","import React from \"react\";\n\nfunction Home() {\n  return (\n    <div style={{ margin: \"0 auto\", width: \"100%\" , marginTop: '4rem'}}>\n      <img\n        src=\"https://images.unsplash.com/photo-1556075798-4825dfaaf498?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=400&q=60\"\n        \n        alt=\"home page\"\n      />\n    </div>\n  );\n}\n\nexport default Home;\n","import React from 'react';\nimport { BrowserRouter as Router, Route} from 'react-router-dom';\nimport './App.css';\nimport Nav from './components/Nav';\nimport UserCards from './components/UserCards';\nimport Followers from './components/Followers';\nimport Home from './components/Home';\nimport axios from 'axios';\n\n\n// change to class component\n\n// getch the data\n\n// display with components\n  // create a usercard component\n  // create followers comonent\n\n\nclass App extends React.Component {\n\n  state = {\n    user: {}\n  }\n\n  componentDidMount() {\n     axios.get('https://api.github.com/users/youngw417').then(res => {\n       console.log('res', res);\n       this.setState({user: res.data})\n     })\n  }\n\n  render() {\n    return (\n    <Router>\n       <div className=\"App\">\n      <Nav />\n      <Route exact path=\"/\" component={Home} />\n      <Route path=\"/usercards\" render ={(props) =><UserCards {...props} user={this.state.user} />}/>\n      <Route path=\"/followers\" component={Followers} />\n    \n\n    </div>\n    </Router>\n   \n  );\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}